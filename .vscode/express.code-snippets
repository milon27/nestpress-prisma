{
    // todo: https://snippet-generator.app/
    "Test": {
        "prefix": "test-whatever",
        "body": ["$1 ->  ${1/(.*)/${1:/capitalize}/}"],
        "description": "test output to console"
    },
    "Nestpress Router": {
        "prefix": "npr",
        "body": [
            "import { Router } from \"express\";",
            "import { $1Controller } from \"./${1/(.*)/${1:/downcase}/}.controller\";",
            "",
            "const $1Router = Router()",
            "",
            "/**",
            " * @description get all ${1/(.*)/${1:/downcase}/} with paginate",
            " * @url {BASE_URL}/${1/(.*)/${1:/downcase}/}/",
            " */",
            "$1Router.get('/', $1Controller.getAllByPaginate)",
            "",
            "/**",
            " * @description get single ${1/(.*)/${1:/downcase}/}",
            " * @url {BASE_URL}/${1/(.*)/${1:/downcase}/}/:id",
            " */",
            "$1Router.get('/:id', $1Controller.getSingle$1)",
            "",
            "/**",
            " * @description create a new ${1/(.*)/${1:/downcase}/}",
            " * @url {BASE_URL}/${1/(.*)/${1:/downcase}/}/",
            " */",
            "$1Router.post('/', $1Controller.create$1)",
            "",
            "/**",
            " * @description update a ${1/(.*)/${1:/downcase}/}",
            " * @url {BASE_URL}/${1/(.*)/${1:/downcase}/}/:id",
            " */",
            "$1Router.put('/:id', $1Controller.update$1)",
            "",
            "/**",
            " * @description delete a ${1/(.*)/${1:/downcase}/}",
            " * @url {BASE_URL}/${1/(.*)/${1:/downcase}/}/:id",
            " */",
            "$1Router.delete('/:id', $1Controller.delete$1)",
            "",
            "",
            "export default $1Router"
        ],
        "description": "Nestpress Router"
    },
    "Nestpress Controller": {
        "prefix": "npc",
        "body": [
            "import { Request, Response, NextFunction } from \"express\"",
            "",
            "export const $1Controller = {",
            "    getAllByPaginate: (req: Request, res: Response, next: NextFunction) => {",
            "       try {",
            "           return res.status(StatusCode.OK).json(MyResponse(\"operation successful\", true));",
            "       } catch (e) {",
            "           return next(e);",
            "       }",
            "    },",
            "    getSingle$1: (req: Request, res: Response, next: NextFunction) => {",
            "       try {",
            "           return res.status(StatusCode.OK).json(MyResponse(\"operation successful\", true));",
            "       } catch (e) {",
            "           return next(e);",
            "       }",
            "    },",
            "    create$1: (req: Request, res: Response, next: NextFunction) => {",
            "       try {",
            "           return res.status(StatusCode.OK).json(MyResponse(\"operation successful\", true));",
            "       } catch (e) {",
            "           return next(e);",
            "       }",
            "    },",
            "    update$1: (req: Request, res: Response, next: NextFunction) => {",
            "       try {",
            "           return res.status(StatusCode.OK).json(MyResponse(\"operation successful\", true));",
            "       } catch (e) {",
            "           return next(e);",
            "       }",
            "    },",
            "    delete$1: (req: Request, res: Response, next: NextFunction) => {",
            "       try {",
            "           return res.status(StatusCode.OK).json(MyResponse(\"operation successful\", true));",
            "       } catch (e) {",
            "           return next(e);",
            "       }",
            "    },",
            "}",
            ""
        ],
        "description": "Express Controller"
    },
    "update-me-later-based-on-project": {
        "prefix": "update-me-later-based-on-project",
        "body": [
            "import { $1 } from \"@prisma/client\"",
            "import { Request, Response, NextFunction } from \"express\"",
            "import { $1Dto } from \"../models/dto/$1Dto\"",
            "import MyResponse from \"../models/MyResponse\"",
            "import Constant from \"../utils/Constant\"",
            "import Helper from \"../utils/Helper\"",
            "",
            "const $1Controller = {",
            "    getAllByPaginate: async (req: Request, res: Response, next: NextFunction) => {",
            "        try {",
            "            const page = req.query.page as string || \"1\"",
            "            const page_size = req.query.page_size as string || Constant.PAGE_SIZE.toString()",
            "            const skip = (parseInt(page) - 1) * parseInt(page_size)",
            "            ",
            "            if (isNaN(skip)) {",
            "                throw new Error(\"Enter Valid Page Number and Page Size!\")",
            "            }",
            "            const count = await req.prisma.${1/(.*)/${1:/downcase}/}.count()",
            "            const list = await req.prisma.${1/(.*)/${1:/downcase}/}.findMany({",
            "                skip: skip,",
            "                take: parseInt(page_size),",
            "                orderBy: {",
            "                    createdAt: \"desc\"",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1[]>(false, \"get data successfuly\", list,count))",
            "        } catch (e) {",
            "            console.log(\"getAllByPaginate: \", e)",
            "            return next(e)",
            "        }",
            "    },",
            "    getSingle$1: async (req: Request, res: Response, next: NextFunction) => {",
            "        try {",
            "            const { id } = req.params",
            "",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.findUnique({",
            "                where: {",
            "                    id: id",
            "                }",
            "            })",
            "            if (!${1/(.*)/${1:/downcase}/}) {",
            "                throw new Error(\"No $1 Found!\")",
            "            }",
            "            res.status(200).json(MyResponse<$1>(false, \"get data successfuly\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"getSingle$1: \", e)",
            "            return next(e)",
            "        }",
            "    },",
            "    create$1: async (req: Request, res: Response, next: NextFunction) => {",
            "        try {",
            "            const { title, desc } = req.body as $1Dto",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.create({",
            "                data: {",
            "                    title, desc",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1>(false, \"created successfuly\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"create$1: \", e)",
            "            return next(e)",
            "        }",
            "    },",
            "    update$1: async (req: Request, res: Response, next: NextFunction) => {",
            "        try {",
            "            const { id } = req.params",
            "            const { title, desc } = req.body as Partial<$1Dto>",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.update({",
            "                data: {",
            "                    title: title || undefined,",
            "                    desc: desc || undefined",
            "                },",
            "                where: {",
            "                    id: id",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1>(false, \"updated successfuly\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"update$1: \", e)",
            "            return next(e)",
            "        }",
            "    },",
            "    delete$1: async (req: Request, res: Response, next: NextFunction) => {",
            "        try {",
            "            const { id } = req.params",
            "            const ${1/(.*)/${1:/downcase}/} = await req.prisma.${1/(.*)/${1:/downcase}/}.delete({",
            "                where: {",
            "                    id: id",
            "                }",
            "            })",
            "            res.status(200).json(MyResponse<$1>(false, \"deleted successfuly\", ${1/(.*)/${1:/downcase}/}))",
            "        } catch (e) {",
            "            console.log(\"delete$1: \", e)",
            "            return next(e)",
            "        }",
            "    },",
            "}",
            "export $1Controller"
        ],
        "description": "ExpressControoler"
    }
}
